# codegen: do not edit
<%= if @structure.name in ["LaunchRequestArguments", "AttachRequestArguments"] do %>

defmodule GenDAP.Structures.<%= @structure.name %> do
  <%= if @structure.documentation do %>
  @moduledoc """
  <%= String.replace(@structure.documentation, "\n", "\n  ") %>
  """
  <% end %>

  import Schematic, warn: false

  @typedoc "A type defining DAP structure <%= @structure.name %>"
  @type t() :: %{
    <%= for p <- @properties do %><%= maybe_wrap_in_optional(p.optional, ~s|:#{format_property_name(p.name)}| ) %> => <%= DAPCodegen.Codegen.to_string(p.type, @metamodel) %>,<% end %>
    optional(String.t()) => any()
  }

  @doc false
  @spec schematic() :: Schematic.t()
  def schematic() do
    all([map(%{<%= for p <- @properties do %>
      <%= maybe_wrap_in_optional(p.optional, ~s|{"#{p.name}", :#{format_property_name(p.name)}}| ) %> => <%= maybe_replace_with_recurse(DAPCodegen.Schematic.to_string(p.type, @metamodel), DAPCodegen.Schematic.to_string(DAPCodegen.ReferenceType.new(@structure), @metamodel)) %>,<% end %>
    }), map()])
  end
end
<% else %>

defmodule GenDAP.Structures.<%= @structure.name %> do<%= if @structure.documentation do %>
  @moduledoc """
  <%= String.replace(@structure.documentation, "\n", "\n  ") %>
  """<% end %>

  import Schematic, warn: false

  use TypedStruct

  @doc """
  ## Fields
  <%= for p <- @properties do %>
  * <%= format_property_name(p.name) %><%= if p.documentation do %>: <%= String.replace(p.documentation, "\n", "\n    ") %><% end %><% end %>
  """

  typedstruct do
    @typedoc "A type defining DAP structure <%= @structure.name %>"<%= for p <- @properties do %>
    field :<%= format_property_name(p.name) %>, <%= DAPCodegen.Codegen.to_string(p.type, @metamodel) %><%= enforce(p.optional) %><% end %>
  end

  @doc false
  @spec schematic() :: Schematic.t()
  def schematic() do
    schema(__MODULE__, %{<%= for p <- @properties do %>
      <%= maybe_wrap_in_optional(p.optional, ~s|{"#{p.name}", :#{format_property_name(p.name)}}| ) %> => <%= maybe_replace_with_recurse(DAPCodegen.Schematic.to_string(p.type, @metamodel), DAPCodegen.Schematic.to_string(DAPCodegen.ReferenceType.new(@structure), @metamodel)) %>,<% end %>
    })
  end
end
<% end %>
