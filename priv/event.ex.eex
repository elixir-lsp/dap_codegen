# codegen: do not edit
<%
  alias DAPCodegen.PropertyName
%>
defmodule GenDAP.Events.<%= DAPCodegen.Naming.name(@event) %> do<%= if @event.documentation do %>
  @moduledoc """
  <%= String.replace(@event.documentation, "\n", "\n  ") %>

  Message Direction: <%= @event.message_direction %>
  """<% end %>

  import Schematic, warn: false

  use TypedStruct

  @doc """
  ## Fields
  <%= for p <- @properties do %>
  * <%= format_property_name(p.name) %><%= if p.documentation do %>: <%= String.replace(p.documentation, "\n", "\n    ") %><% end %><% end %>
  """

  typedstruct do
    @typedoc "A type defining DAP event <%= @event.event %>"

    field :seq, integer(), enforce: true
    field :type, String.t(), default: "event"
    field :event, String.t(), default: "<%= @event.event %>"<%= unless @body == :none do %>
    field :body, <%= DAPCodegen.Codegen.to_string(@body, @metamodel) %>, enforce: <%= @event.body_required %><% end %>
  end

  @doc false
  @spec schematic() :: Schematic.t()
  def schematic() do
    schema(__MODULE__, %{
      :seq => int(),
      :type => "event",
      :event => "<%= @event.event %>",<%= unless @body == :none do %><%= if @event.body_required do %>
      :body => <%= DAPCodegen.Schematic.to_string(@body, @metamodel) %><% else %>
      optional(:body) => <%= DAPCodegen.Schematic.to_string(@body, @metamodel) %><% end %><% end %>
    })
  end
end
